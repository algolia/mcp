"renderingContent": {
        "description": "Extra data that can be used in the search UI.\n\nYou can use this to control aspects of your search UI, such as the order of facet names and values\nwithout changing your frontend code.\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facetOrdering": {
            "$ref": "#/components/schemas/facetOrdering"
          },
          "redirect": {
            "$ref": "#/components/schemas/redirectURL"
          },
          "widgets": {
            "$ref": "#/components/schemas/widgets"
          }
        },
        "x-categories": ["Advanced"]
      },
      "reRankingApplyFilter": {
        "description": "Restrict [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/) to records that match these filters.\n",
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reRankingApplyFilter"
            }
          },
          {
            "type": "string",
            "x-categories": ["Filtering"]
          }
        ]
      },
      "indexSettingsAsSearchParams": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "attributesToRetrieve": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["author", "title", "content"],
            "description": "Attributes to include in the API response.\n\nTo reduce the size of your response, you can retrieve only some of the attributes.\nAttribute names are case-sensitive.\n\n- `*` retrieves all attributes, except attributes included in the `customRanking` and `unretrievableAttributes` settings.\n- To retrieve all attributes except a specific one, prefix the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`.\n- The `objectID` attribute is always included.\n",
            "default": ["*"],
            "x-categories": ["Attributes"]
          },
          "ranking": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Determines the order in which Algolia returns your results.\n\nBy default, each entry corresponds to a [ranking criteria](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/).\nThe tie-breaking algorithm sequentially applies each criterion in the order they're specified.\nIf you configure a replica index for [sorting by an attribute](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/sort-by-attribute/),\nyou put the sorting attribute at the top of the list.\n\n**Modifiers**\n\n- `asc(\"ATTRIBUTE\")`.\n  Sort the index by the values of an attribute, in ascending order.\n- `desc(\"ATTRIBUTE\")`.\n  Sort the index by the values of an attribute, in descending order.\n\nBefore you modify the default setting,\nyou should test your changes in the dashboard,\nand by [A/B testing](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/).\n",
            "default": [
              "typo",
              "geo",
              "words",
              "filters",
              "proximity",
              "attribute",
              "exact",
              "custom"
            ],
            "x-categories": ["Ranking"]
          },
          "relevancyStrictness": {
            "type": "integer",
            "example": 90,
            "description": "Relevancy threshold below which less relevant results aren't included in the results.\n\nYou can only set `relevancyStrictness` on [virtual replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/#what-are-virtual-replicas).\nUse this setting to strike a balance between the relevance and number of returned results.\n",
            "default": 100,
            "x-categories": ["Ranking"]
          },
          "attributesToHighlight": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["author", "title", "conten", "content"],
            "description": "Attributes to highlight.\n\nBy default, all searchable attributes are highlighted.\nUse `*` to highlight all attributes or use an empty array `[]` to turn off highlighting.\nAttribute names are case-sensitive.\n\nWith highlighting, strings that match the search query are surrounded by HTML tags defined by `highlightPreTag` and `highlightPostTag`.\nYou can use this to visually highlight matching parts of a search query in your UI.\n\nFor more information, see [Highlighting and snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js/).\n",
            "x-categories": ["Highlighting and Snippeting"]
          },
          "attributesToSnippet": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["content:80", "description"],
            "description": "Attributes for which to enable snippets.\nAttribute names are case-sensitive.\n\nSnippets provide additional context to matched words.\nIf you enable snippets, they include 10 words, including the matched word.\nThe matched word will also be wrapped by HTML tags for highlighting.\nYou can adjust the number of words with the following notation: `ATTRIBUTE:NUMBER`,\nwhere `NUMBER` is the number of words to be extracted.\n",
            "default": [],
            "x-categories": ["Highlighting and Snippeting"]
          },
          "highlightPreTag": {
            "type": "string",
            "description": "HTML tag to insert before the highlighted parts in all highlighted results and snippets.",
            "default": "<em>",
            "x-categories": ["Highlighting and Snippeting"]
          },
          "highlightPostTag": {
            "type": "string",
            "description": "HTML tag to insert after the highlighted parts in all highlighted results and snippets.",
            "default": "</em>",
            "x-categories": ["Highlighting and Snippeting"]
          },
          "snippetEllipsisText": {
            "type": "string",
            "description": "String used as an ellipsis indicator when a snippet is truncated.",
            "default": "â€¦",
            "x-categories": ["Highlighting and Snippeting"]
          },
          "restrictHighlightAndSnippetArrays": {
            "type": "boolean",
            "description": "Whether to restrict highlighting and snippeting to items that at least partially matched the search query.\nBy default, all items are highlighted and snippeted.\n",
            "default": false,
            "x-categories": ["Highlighting and Snippeting"]
          },
          "hitsPerPage": {
            "$ref": "#/components/schemas/hitsPerPage"
          },
          "minWordSizefor1Typo": {
            "type": "integer",
            "description": "Minimum number of characters a word in the search query must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).",
            "default": 4,
            "x-categories": ["Typos"]
          },
          "minWordSizefor2Typos": {
            "type": "integer",
            "description": "Minimum number of characters a word in the search query must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).",
            "default": 8,
            "x-categories": ["Typos"]
          },
          "typoTolerance": {
            "$ref": "#/components/schemas/typoTolerance"
          },
          "allowTyposOnNumericTokens": {
            "type": "boolean",
            "description": "Whether to allow typos on numbers in the search query.\n\nTurn off this setting to reduce the number of irrelevant matches\nwhen searching in large sets of similar numbers.\n",
            "default": true,
            "x-categories": ["Typos"]
          },
          "disableTypoToleranceOnAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["sku"],
            "description": "Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).\nAttribute names are case-sensitive.\n\nReturning only exact matches can help when:\n\n- [Searching in hyphenated attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/).\n- Reducing the number of matches when you have too many.\n  This can happen with attributes that are long blocks of text, such as product descriptions.\n\nConsider alternatives such as `disableTypoToleranceOnWords` or adding synonyms if your attributes have intentional unusual spellings that might look like typos.\n",
            "default": [],
            "x-categories": ["Typos"]
          },
          "ignorePlurals": {
            "$ref": "#/components/schemas/ignorePlurals"
          },
          "removeStopWords": {
            "$ref": "#/components/schemas/removeStopWords"
          },
          "queryLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "example": ["es"],
            "description": "Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries.\n\nThis setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings.\nThis setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages.\nTo support this, you must place the CJK language **first**.\n\n**You should always specify a query language.**\nIf you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/),\nor the languages you specified with the `ignorePlurals` or `removeStopWords` parameters.\nThis can lead to unexpected search results.\nFor more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).\n",
            "default": [],
            "x-categories": ["Languages"]
          },
          "decompoundQuery": {
            "type": "boolean",
            "description": "Whether to split compound words in the query into their building blocks.\n\nFor more information, see [Word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words).\nWord segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian.\nDecompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark).\nFor example, `GartenstÃ¼hle` won't be decompounded if the `Ã¼` consists of `u` (U+0075) and `â—ŒÌˆ` (U+0308).\n",
            "default": true,
            "x-categories": ["Languages"]
          },
          "enableRules": {
            "type": "boolean",
            "description": "Whether to enable rules.",
            "default": true,
            "x-categories": ["Rules"]
          },
          "enablePersonalization": {
            "type": "boolean",
            "description": "Whether to enable Personalization.",
            "default": false,
            "x-categories": ["Personalization"]
          },
          "queryType": {
            "$ref": "#/components/schemas/queryType"
          },
          "removeWordsIfNoResults": {
            "$ref": "#/components/schemas/removeWordsIfNoResults"
          },
          "mode": {
            "$ref": "#/components/schemas/mode"
          },
          "semanticSearch": {
            "$ref": "#/components/schemas/semanticSearch"
          },
          "advancedSyntax": {
            "type": "boolean",
            "description": "Whether to support phrase matching and excluding words from search queries.\n\nUse the `advancedSyntaxFeatures` parameter to control which feature is supported.\n",
            "default": false,
            "x-categories": ["Query strategy"]
          },
          "optionalWords": {
            "$ref": "#/components/schemas/optionalWords"
          },
          "disableExactOnAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["description"],
            "description": "Searchable attributes for which you want to [turn off the Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).\nAttribute names are case-sensitive.\n\nThis can be useful for attributes with long values, where the likelihood of an exact match is high,\nsuch as product descriptions.\nTurning off the Exact ranking criterion for these attributes favors exact matching on other attributes.\nThis reduces the impact of individual attributes with a lot of content on ranking.\n",
            "default": [],
            "x-categories": ["Query strategy"]
          },
          "exactOnSingleWordQuery": {
            "$ref": "#/components/schemas/exactOnSingleWordQuery"
          },
          "alternativesAsExact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/alternativesAsExact"
            },
            "description": "Determine which plurals and synonyms should be considered an exact matches.\n\nBy default, Algolia treats singular and plural forms of a word, and single-word synonyms, as [exact](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#exact) matches when searching.\nFor example:\n\n- \"swimsuit\" and \"swimsuits\" are treated the same\n- \"swimsuit\" and \"swimwear\" are treated the same (if they are [synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#regular-synonyms)).\n\n- `ignorePlurals`.\n  Plurals and similar declensions added by the `ignorePlurals` setting are considered exact matches.\n\n- `singleWordSynonym`.\n  Single-word synonyms, such as \"NY\" = \"NYC\", are considered exact matches.\n\n- `multiWordsSynonym`.\n  Multi-word synonyms, such as \"NY\" = \"New York\", are considered exact matches.\n",
            "default": ["ignorePlurals", "singleWordSynonym"],
            "x-categories": ["Query strategy"]
          },
          "advancedSyntaxFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/advancedSyntaxFeatures"
            },
            "description": "Advanced search syntax features you want to support.\n\n- `exactPhrase`.\n  Phrases in quotes must match exactly.\n  For example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\".\n\n- `excludeWords`.\n  Query words prefixed with a `-` must not occur in a record.\n  For example, `search -engine` matches records that contain \"search\" but not \"engine\".\n\nThis setting only has an effect if `advancedSyntax` is true.\n",
            "default": ["exactPhrase", "excludeWords"],
            "x-categories": ["Query strategy"]
          },
          "distinct": {
            "$ref": "#/components/schemas/distinct"
          },
          "replaceSynonymsInHighlight": {
            "type": "boolean",
            "description": "Whether to replace a highlighted word with the matched synonym.\n\nBy default, the original words are highlighted even if a synonym matches.\nFor example, with `home` as a synonym for `house` and a search for `home`,\nrecords matching either \"home\" or \"house\" are included in the search results,\nand either \"home\" or \"house\" are highlighted.\n\nWith `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records,\nbut all occurrences of \"house\" are replaced by \"home\" in the highlighted response.\n",
            "default": false,
            "x-categories": ["Highlighting and Snippeting"]
          },
          "minProximity": {
            "type": "integer",
            "minimum": 1,
            "maximum": 7,
            "description": "Minimum proximity score for two matching words.\n\nThis adjusts the [Proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity)\nby equally scoring matches that are farther apart.\n\nFor example, if `minProximity` is 2, neighboring matches and matches with one word between them would have the same score.\n",
            "default": 1,
            "x-categories": ["Advanced"]
          },
          "responseFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Properties to include in the API response of search and browse requests.\n\nBy default, all response properties are included.\nTo reduce the response size, you can select which properties should be included.\n\nAn empty list may lead to an empty API response (except properties you can't exclude).\n\nYou can't exclude these properties:\n`message`, `warning`, `cursor`, `abTestVariantID`,\nor any property added by setting `getRankingInfo` to true.\n\nYour search depends on the `hits` field. If you omit this field, searches won't return any results.\nYour UI might also depend on other properties, for example, for pagination.\nBefore restricting the response size, check the impact on your search experience.\n",
            "default": ["*"],
            "x-categories": ["Advanced"]
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of facet values to return for each facet.",
            "default": 100,
            "maximum": 1000,
            "x-categories": ["Faceting"]
          },
          "sortFacetValuesBy": {
            "type": "string",
            "description": "Order in which to retrieve facet values.\n\n- `count`.\n  Facet values are retrieved by decreasing count.\n  The count is the number of matching records containing this facet value.\n\n- `alpha`.\n  Retrieve facet values alphabetically.\n\nThis setting doesn't influence how facet values are displayed in your UI (see `renderingContent`).\nFor more information, see [facet value display](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/facet-display/js/).\n",
            "default": "count",
            "x-categories": ["Faceting"]
          },
          "attributeCriteriaComputedByMinProximity": {
            "type": "boolean",
            "description": "Whether the best matching attribute should be determined by minimum proximity.\n\nThis setting only affects ranking if the Attribute ranking criterion comes before Proximity in the `ranking` setting.\nIf true, the best matching attribute is selected based on the minimum proximity of multiple matches.\nOtherwise, the best matching attribute is determined by the order in the `searchableAttributes` setting.\n",
            "default": false,
            "x-categories": ["Advanced"]
          },
          "renderingContent": {
            "$ref": "#/components/schemas/renderingContent"
          },
          "enableReRanking": {
            "type": "boolean",
            "description": "Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).\n\nThis setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.\n",
            "default": true,
            "x-categories": ["Filtering"]
          },
          "reRankingApplyFilter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/reRankingApplyFilter"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "searchParamsObject": {
        "title": "Search parameters as object",
        "description": "Each parameter value, including the `query` must not be larger than 512 bytes.",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSearchParams"
          },
          {
            "$ref": "#/components/schemas/indexSettingsAsSearchParams"
          }
        ]
      },
      "searchParams": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/searchParamsString"
          },
          {
            "$ref": "#/components/schemas/searchParamsObject"
          }
        ]
      },
      "processingTimeMS": {
        "type": "integer",
        "description": "Time the server took to process the request, in milliseconds.",
        "example": 20
      },
      "RedirectRuleIndexMetadata": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Source index for the redirect rule."
          },
          "dest": {
            "type": "string",
            "description": "Destination index for the redirect rule."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the redirect rule."
          },
          "succeed": {
            "type": "boolean",
            "description": "Redirect rule status."
          },
          "data": {
            "title": "redirectRuleIndexData",
            "type": "object",
            "description": "Redirect rule data.",
            "required": ["ruleObjectID"],
            "properties": {
              "ruleObjectID": {
                "type": "string"
              }
            }
          }
        },
        "required": ["data", "succeed", "reason", "dest", "source"]
      },
      "userData": {
        "example": {
          "settingID": "f2a7b51e3503acc6a39b3784ffb84300",
          "pluginVersion": "1.6.0"
        },
        "description": "An object with custom data.\n\nYou can store up to 32kB as custom data.\n",
        "default": {},
        "x-categories": ["Advanced"]
      },
      "baseSearchResponse": {
        "type": "object",
        "additionalProperties": true,
        "required": ["processingTimeMS"],
        "properties": {
          "abTestID": {
            "type": "integer",
            "description": "A/B test ID. This is only included in the response for indices that are part of an A/B test."
          },
          "abTestVariantID": {
            "type": "integer",
            "minimum": 1,
            "description": "Variant ID. This is only included in the response for indices that are part of an A/B test."
          },
          "aroundLatLng": {
            "type": "string",
            "description": "Computed geographical location.",
            "example": "40.71,-74.01",
            "pattern": "^(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)$"
          },
          "automaticRadius": {
            "type": "string",
            "description": "Distance from a central coordinate provided by `aroundLatLng`."
          },
          "exhaustive": {
            "title": "exhaustive",
            "type": "object",
            "description": "Whether certain properties of the search response are calculated exhaustive (exact) or approximated.",
            "properties": {
              "facetsCount": {
                "type": "boolean",
                "title": "facetsCount",
                "description": "Whether the facet count is exhaustive (`true`) or approximate (`false`). See the [related discussion](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-)."
              },
              "facetValues": {
                "type": "boolean",
                "title": "facetValues",
                "description": "The value is `false` if not all facet values are retrieved."
              },
              "nbHits": {
                "type": "boolean",
                "title": "nbHits",
                "description": "Whether the `nbHits` is exhaustive (`true`) or approximate (`false`). When the query takes more than 50ms to be processed, the engine makes an approximation. This can happen when using complex filters on millions of records, when typo-tolerance was not exhaustive, or when enough hits have been retrieved (for example, after the engine finds 10,000 exact matches). `nbHits` is reported as non-exhaustive whenever an approximation is made, even if the approximation didnâ€™t, in the end, impact the exhaustivity of the query."
              },
              "rulesMatch": {
                "type": "boolean",
                "title": "rulesMatch",
                "description": "Rules matching exhaustivity. The value is `false` if rules were enable for this query, and could not be fully processed due a timeout. This is generally caused by the number of alternatives (such as typos) which is too large."
              },
              "typo": {
                "type": "boolean",
                "title": "typo",
                "description": "Whether the typo search was exhaustive (`true`) or approximate (`false`). An approximation is done when the typo search query part takes more than 10% of the query budget (ie. 5ms by default) to be processed (this can happen when a lot of typo alternatives exist for the query). This field will not be included when typo-tolerance is entirely disabled."
              }
            }
          },
          "appliedRules": {
            "description": "Rules applied to the query.",
            "title": "appliedRules",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "exhaustiveFacetsCount": {
            "type": "boolean",
            "description": "See the `facetsCount` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "exhaustiveNbHits": {
            "type": "boolean",
            "description": "See the `nbHits` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "exhaustiveTypo": {
            "type": "boolean",
            "description": "See the `typo` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "facets": {
            "title": "facets",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "facet",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "facet count",
                "type": "integer"
              }
            },
            "description": "Facet counts.",
            "example": {
              "category": {
                "food": 1,
                "tech": 42
              }
            }
          },
          "facets_stats": {
            "type": "object",
            "description": "Statistics for numerical facets.",
            "additionalProperties": {
              "title": "facetStats",
              "type": "object",
              "properties": {
                "min": {
                  "type": "number",
                  "format": "double",
                  "description": "Minimum value in the results."
                },
                "max": {
                  "type": "number",
                  "format": "double",
                  "description": "Maximum value in the results."
                },
                "avg": {
                  "type": "number",
                  "format": "double",
                  "description": "Average facet value in the results."
                },
                "sum": {
                  "type": "number",
                  "format": "double",
                  "description": "Sum of all values in the results."
                }
              }
            }
          },
          "index": {
            "type": "string",
            "example": "indexName",
            "description": "Index name used for the query."
          },
          "indexUsed": {
            "type": "string",
            "description": "Index name used for the query. During A/B testing, the targeted index isn't always the index used by the query.",
            "example": "indexNameAlt"
          },
          "message": {
            "type": "string",
            "description": "Warnings about the query."
          },
          "nbSortedHits": {
            "type": "integer",
            "description": "Number of hits selected and sorted by the relevant sort algorithm.",
            "example": 20
          },
          "parsedQuery": {
            "type": "string",
            "description": "Post-[normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean) query string that will be searched.",
            "example": "george clo"
          },
          "processingTimeMS": {
            "$ref": "#/components/schemas/processingTimeMS"
          },
          "processingTimingsMS": {
            "type": "object",
            "description": "Experimental. List of processing steps and their times, in milliseconds. You can use this list to investigate performance issues."
          },
          "queryAfterRemoval": {
            "type": "string",
            "description": "Markup text indicating which parts of the original query have been removed to retrieve a non-empty result set."
          },
          "redirect": {
            "title": "redirect",
            "type": "object",
            "description": "[Redirect results to a URL](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/redirects/), this this parameter is for internal use only.\n",
            "properties": {
              "index": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RedirectRuleIndexMetadata"
                }
              }
            }
          },
          "renderingContent": {
            "$ref": "#/components/schemas/renderingContent"
          },
          "serverTimeMS": {
            "type": "integer",
            "description": "Time the server took to process the request, in milliseconds.",
            "example": 20
          },
          "serverUsed": {
            "type": "string",
            "description": "Host name of the server that processed the request.",
            "example": "c2-uk-3.algolia.net"
          },
          "userData": {
            "$ref": "#/components/schemas/userData"
          },
          "queryID": {
            "type": "string",
            "description": "Unique identifier for the query. This is used for [click analytics](https://www.algolia.com/doc/guides/analytics/click-analytics/).",
            "example": "a00dbc80a8d13c4565a442e7e2dca80a"
          },
          "_automaticInsights": {
            "type": "boolean",
            "description": "Whether automatic events collection is enabled for the application."
          }
        }
      },
      "nbHits": {
        "type": "integer",
        "description": "Number of results (hits).",
        "example": 20
      },
      "nbPages": {
        "type": "integer",
        "description": "Number of pages of results.",
        "example": 1
      },
      "SearchPagination": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "page": {
            "$ref": "#/components/schemas/page"
          },
          "nbHits": {
            "$ref": "#/components/schemas/nbHits"
          },
          "nbPages": {
            "$ref": "#/components/schemas/nbPages"
          },
          "hitsPerPage": {
            "$ref": "#/components/schemas/hitsPerPage"
          }
        }
      },
      "objectID": {
        "type": "string",
        "description": "Unique record identifier.",
        "example": "test-record-123"
      },
      "highlightedValue": {
        "type": "string",
        "description": "Highlighted attribute value, including HTML tags.",
        "example": "<em>George</em> <em>Clo</em>oney"
      },
      "matchLevel": {
        "type": "string",
        "description": "Whether the whole query string matches or only a part.",
        "enum": ["none", "partial", "full"]
      },
      "highlightResultOption": {
        "type": "object",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "additionalProperties": false,
        "properties": {
          "value": {
            "$ref": "#/components/schemas/highlightedValue"
          },
          "matchLevel": {
            "$ref": "#/components/schemas/matchLevel"
          },
          "matchedWords": {
            "type": "array",
            "description": "List of matched words from the search query.",
            "example": ["action"],
            "items": {
              "type": "string"
            }
          },
          "fullyHighlighted": {
            "type": "boolean",
            "description": "Whether the entire attribute value is highlighted."
          }
        },
        "required": ["value", "matchLevel", "matchedWords"],
        "x-discriminator-fields": ["matchLevel", "matchedWords"]
      },
      "highlightResultMap": {
        "type": "object",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "x-is-free-form": false,
        "additionalProperties": {
          "x-additionalPropertiesName": "attribute",
          "$ref": "#/components/schemas/highlightResult"
        }
      },
      "highlightResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/highlightResultOption"
          },
          {
            "$ref": "#/components/schemas/highlightResultMap"
          },
          {
            "$ref": "#/components/schemas/highlightResultArray"
          }
        ]
      },
      "highlightResultArray": {
        "type": "array",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "items": {
          "$ref": "#/components/schemas/highlightResult"
        }
      },
      "snippetResultOption": {
        "type": "object",
        "description": "Snippets that show the context around a matching search query.",
        "additionalProperties": false,
        "properties": {
          "value": {
            "$ref": "#/components/schemas/highlightedValue"
          },
          "matchLevel": {
            "$ref": "#/components/schemas/matchLevel"
          }
        },
        "required": ["value", "matchLevel"],
        "x-discriminator-fields": ["matchLevel"]
      },
      "snippetResultMap": {
        "type": "object",
        "description": "Snippets that show the context around a matching search query.",
        "x-is-free-form": false,
        "additionalProperties": {
          "x-additionalPropertiesName": "attribute",
          "$ref": "#/components/schemas/snippetResult"
        }
      },
      "snippetResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/snippetResultOption"
          },
          {
            "$ref": "#/components/schemas/snippetResultMap"
          },
          {
            "$ref": "#/components/schemas/snippetResultArray"
          }
        ]
      },
      "snippetResultArray": {
        "type": "array",
        "description": "Snippets that show the context around a matching search query.",
        "items": {
          "$ref": "#/components/schemas/snippetResult"
        }
      },
      "matchedGeoLocation": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "double",
            "description": "Latitude of the matched location."
          },
          "lng": {
            "type": "number",
            "format": "double",
            "description": "Longitude of the matched location."
          },
          "distance": {
            "type": "integer",
            "description": "Distance between the matched location and the search location (in meters)."
          }
        }
      },
      "personalization": {
        "type": "object",
        "properties": {
          "filtersScore": {
            "type": "integer",
            "description": "The score of the filters."
          },
          "rankingScore": {
            "type": "integer",
            "description": "The score of the ranking."
          },
          "score": {
            "type": "integer",
            "description": "The score of the event."
          }
        }
      },
      "rankingInfo": {
        "type": "object",
        "description": "Object with detailed information about the record's ranking.",
        "additionalProperties": false,
        "properties": {
          "filters": {
            "type": "integer",
            "minimum": 0,
            "description": "Whether a filter matched the query."
          },
          "firstMatchedWord": {
            "type": "integer",
            "minimum": 0,
            "description": "Position of the first matched word in the best matching attribute of the record."
          },
          "geoDistance": {
            "type": "integer",
            "minimum": 0,
            "description": "Distance between the geo location in the search query and the best matching geo location in the record, divided by the geo precision (in meters)."
          },
          "geoPrecision": {
            "type": "integer",
            "minimum": 1,
            "description": "Precision used when computing the geo distance, in meters."
          },
          "matchedGeoLocation": {
            "$ref": "#/components/schemas/matchedGeoLocation"
          },
          "personalization": {
            "$ref": "#/components/schemas/personalization"
          },
          "nbExactWords": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of exactly matched words."
          },
          "nbTypos": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of typos encountered when matching the record."
          },
          "promoted": {
            "type": "boolean",
            "description": "Whether the record was promoted by a rule."
          },
          "proximityDistance": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of words between multiple matches in the query plus 1. For single word queries, `proximityDistance` is 0."
          },
          "userScore": {
            "type": "integer",
            "description": "Overall ranking of the record, expressed as a single integer. This attribute is internal."
          },
          "words": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of matched words."
          },
          "promotedByReRanking": {
            "type": "boolean",
            "description": "Whether the record is re-ranked."
          }
        },
        "required": ["nbTypos", "firstMatchedWord", "geoDistance", "nbExactWords", "userScore"]
      },
      "distinctSeqID": {
        "type": "integer"
      },
      "hit": {
        "type": "object",
        "description": "Search result.\n\nA hit is a record from your index, augmented with special attributes for highlighting, snippeting, and ranking.\n",
        "x-is-generic": true,
        "additionalProperties": true,
        "required": ["objectID"],
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          },
          "_highlightResult": {
            "$ref": "#/components/schemas/highlightResultMap"
          },
          "_snippetResult": {
            "$ref": "#/components/schemas/snippetResultMap"
          },
          "_rankingInfo": {
            "$ref": "#/components/schemas/rankingInfo"
          },
          "_distinctSeqID": {
            "$ref": "#/components/schemas/distinctSeqID"
          }
        }
      },
      "searchHits": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "hits": {
            "type": "array",
            "description": "Search results (hits).\n\nHits are records from your index that match the search criteria, augmented with additional attributes, such as, for highlighting.\n",
            "items": {
              "$ref": "#/components/schemas/hit"
            }
          },
          "query": {
            "$ref": "#/components/schemas/query"
          },
          "params": {
            "type": "string",
            "description": "URL-encoded string of all search parameters.",
            "example": "query=a&hitsPerPage=20"
          }
        },
        "required": ["hits", "query", "params"]
      },
      "searchResponse": {
        "additionalProperties": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSearchResponse"
          },
          {
            "$ref": "#/components/schemas/SearchPagination"
          },
          {
            "$ref": "#/components/schemas/searchHits"
          }
        ]
      },
      "indexName": {
        "type": "string",
        "example": "products",
        "description": "Index name (case-sensitive)."
      },
      "searchTypeDefault": {
        "type": "string",
        "enum": ["default"],
        "default": "default",
        "description": "- `default`: perform a search query\n- `facet` [searches for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).\n"
      },
      "searchForHitsOptions": {
        "x-is-SearchForHitsOptions": true,
        "type": "object",
        "properties": {
          "indexName": {
            "$ref": "#/components/schemas/indexName"
          },
          "type": {
            "$ref": "#/components/schemas/searchTypeDefault"
          }
        },
        "required": ["indexName"]
      },
      "SearchForHits": {
        "allOf": [
          {
            "$ref": "#/components/schemas/searchParams"
          },
          {
            "$ref": "#/components/schemas/searchForHitsOptions"
          }
        ]
      },
      "facetQuery": {
        "type": "string",
        "description": "Text to search inside the facet's values.",
        "example": "george",
        "default": ""
      },
      "maxFacetHits": {
        "type": "integer",
        "description": "Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).",
        "maximum": 100,
        "default": 10,
        "x-categories": ["Advanced"]
      },
      "searchTypeFacet": {
        "type": "string",
        "enum": ["facet"],
        "default": "facet",
        "description": "- `default`: perform a search query\n- `facet` [searches for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).\n"
      },
      "searchForFacetsOptions": {
        "type": "object",
        "properties": {
          "facet": {
            "type": "string",
            "description": "Facet name."
          },
          "indexName": {
            "$ref": "#/components/schemas/indexName"
          },
          "facetQuery": {
            "$ref": "#/components/schemas/facetQuery"
          },
          "maxFacetHits": {
            "$ref": "#/components/schemas/maxFacetHits"
          },
          "type": {
            "$ref": "#/components/schemas/searchTypeFacet"
          }
        },
        "required": ["indexName", "type", "facet"]
      },
      "SearchForFacets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/searchParams"
          },
          {
            "$ref": "#/components/schemas/searchForFacetsOptions"
          }
        ],
        "x-discriminator-fields": ["facet", "type"]
      },
      "SearchQuery": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SearchForHits"
          },
          {
            "$ref": "#/components/schemas/SearchForFacets"
          }
        ]
      },
      "searchStrategy": {
        "type": "string",
        "enum": ["none", "stopIfEnoughMatches"],
        "description": "Strategy for multiple search queries:\n\n- `none`. Run all queries.\n- `stopIfEnoughMatches`. Run the queries one by one, stopping as soon as a query matches at least the `hitsPerPage` number of results.\n"
      },
      "searchForFacetValuesResponse": {
        "type": "object",
        "additionalProperties": false,
        "required": ["facetHits", "exhaustiveFacetsCount"],
        "x-discriminator-fields": ["facetHits"],
        "properties": {
          "facetHits": {
            "type": "array",
            "description": "Matching facet values.",
            "items": {
              "title": "facetHits",
              "type": "object",
              "additionalProperties": false,
              "required": ["value", "highlighted", "count"],
              "properties": {
                "value": {
                  "description": "Facet value.",
                  "example": "Mobile phone",
                  "type": "string"
                },
                "highlighted": {
                  "$ref": "#/components/schemas/highlightedValue"
                },
                "count": {
                  "description": "Number of records with this facet value. [The count may be approximated](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).",
                  "type": "integer"
                }
              }
            }
          },
          "exhaustiveFacetsCount": {
            "type": "boolean",
            "description": "Whether the facet count is exhaustive (true) or approximate (false).\nFor more information, see [Why are my facet and hit counts not accurate](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).\n"
          },
          "processingTimeMS": {
            "$ref": "#/components/schemas/processingTimeMS"
          }
        }
      },
      "searchResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/searchResponse"
          },
          {
            "$ref": "#/components/schemas/searchForFacetValuesResponse"
          }
        ]
      },
      "cursor": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cursor": {
            "type": "string",
            "description": "Cursor to get the next page of the response.\n\nThe parameter must match the value returned in the response of a previous request.\nThe last page of the response does not return a `cursor` attribute.\n",
            "example": "jMDY3M2MwM2QwMWUxMmQwYWI0ZTN"
          }
        }
      },
      "browseParamsObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/searchParamsObject"
          },
          {
            "$ref": "#/components/schemas/cursor"
          }
        ]
      },
      "browseParams": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/searchParamsString"
          },
          {
            "$ref": "#/components/schemas/browseParamsObject"
          }
        ]
      },
      "BrowsePagination": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "page": {
            "$ref": "#/components/schemas/page"
          },
          "nbHits": {
            "$ref": "#/components/schemas/nbHits"
          },
          "nbPages": {
            "$ref": "#/components/schemas/nbPages"
          },
          "hitsPerPage": {
            "$ref": "#/components/schemas/hitsPerPage"
          }
        }
      },
      "browseResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSearchResponse"
          },
          {
            "$ref": "#/components/schemas/BrowsePagination"
          },
          {
            "$ref": "#/components/schemas/searchHits"
          },
          {
            "$ref": "#/components/schemas/cursor"
          }
        ]
      },
      "createdAt": {
        "type": "string",
        "example": "2023-07-04T12:49:15Z",
        "description": "Date and time when the object was created, in RFC 3339 format."
      },
      "taskID": {
        "type": "integer",
        "format": "int64",
        "example": 1514562690001,
        "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
      },
      "deletedAt": {
        "type": "string",
        "example": "2023-06-27T14:42:38.831Z",
        "description": "Date and time when the object was deleted, in RFC 3339 format."
      },
      "updatedAt": {
        "type": "string",
        "example": "2023-07-04T12:49:15Z",
        "description": "Date and time when the object was updated, in RFC 3339 format."
      },
      "deleteByParams": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facetFilters": {
            "$ref": "#/components/schemas/facetFilters"
          },
          "filters": {
            "$ref": "#/components/schemas/filters"
          },
          "numericFilters": {
            "$ref": "#/components/schemas/numericFilters"
          },
          "tagFilters": {
            "$ref": "#/components/schemas/tagFilters"
          },
          "aroundLatLng": {
            "$ref": "#/components/schemas/aroundLatLng"
          },
          "aroundRadius": {
            "$ref": "#/components/schemas/aroundRadius"
          },
          "insideBoundingBox": {
            "$ref": "#/components/schemas/insideBoundingBox"
          },
          "insidePolygon": {
            "$ref": "#/components/schemas/insidePolygon"
          }
        }
      },
      "updatedAtResponse": {
        "type": "object",
        "description": "Response, taskID, and update timestamp.",
        "additionalProperties": false,
        "required": ["taskID", "updatedAt"],
        "properties": {
          "taskID": {
            "$ref": "#/components/schemas/taskID"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          }
        }
      },
      "action": {
        "type": "string",
        "enum": [
          "addObject",
          "updateObject",
          "partialUpdateObject",
          "partialUpdateObjectNoCreate",
          "deleteObject",
          "delete",
          "clear"
        ],
        "description": "Type of indexing operation."
      },
      "batchWriteParams": {
        "title": "batchWriteParams",
        "description": "Batch parameters.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "title": "batchRequest",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "action": {
                  "$ref": "#/components/schemas/action"
                },
                "body": {
                  "type": "object",
                  "description": "Operation arguments (varies with specified `action`).",
                  "example": {
                    "name": "Betty Jane McCamey",
                    "company": "Vita Foods Inc.",
                    "email": "betty@mccamey.com"
                  }
                }
              },
              "required": ["action", "body"]
            }
          }
        },
        "required": ["requests"],
        "example": {
          "requests": [
            {
              "action": "addObject",
              "body": {
                "name": "Betty Jane McCamey",
                "company": "Vita Foods Inc.",
                "email": "betty@mccamey.com"
              }
            },
            {
              "action": "addObject",
              "body": {
                "name": "Gayla geimer",
                "company": "Ortman McCain Co.",
                "email": "gayla@geimer.com"
              }
            }
          ]
        }
      },
      "objectIDs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": ["record-1", "record-2"],
        "description": "Unique record identifiers."
      },
      "batchResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "taskID": {
            "$ref": "#/components/schemas/taskID"
          },
          "objectIDs": {
            "$ref": "#/components/schemas/objectIDs"
          }
        },
        "required": ["taskID", "objectIDs"]
      },
      "baseIndexSettings": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "attributesForFaceting": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "author",
              "filterOnly(isbn)",
              "searchable(edition)",
              "afterDistinct(category)",
              "afterDistinct(searchable(publisher))"
            ],
            "description": "Attributes used for [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/).\n\nFacets are attributes that let you categorize search results.\nThey can be used for filtering search results.\nBy default, no attribute is used for faceting.\nAttribute names are case-sensitive.\n\n**Modifiers**\n\n- `filterOnly(\"ATTRIBUTE\")`.\n  Allows the attribute to be used as a filter but doesn't evaluate the facet values.\n\n- `searchable(\"ATTRIBUTE\")`.\n  Allows searching for facet values.\n\n- `afterDistinct(\"ATTRIBUTE\")`.\n  Evaluates the facet count _after_ deduplication with `distinct`.\n  This ensures accurate facet counts.\n  You can apply this modifier to searchable facets: `afterDistinct(searchable(ATTRIBUTE))`.\n",
            "default": [],
            "x-categories": ["Faceting"]
          },
          "replicas": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["virtual(prod_products_price_asc)", "dev_products_replica"],
            "description": "Creates [replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/).\n\nReplicas are copies of a primary index with the same records but different settings, synonyms, or rules.\nIf you want to offer a different ranking or sorting of your search results, you'll use replica indices.\nAll index operations on a primary index are automatically forwarded to its replicas.\nTo add a replica index, you must provide the complete set of replicas to this parameter.\nIf you omit a replica from this list, the replica turns into a regular, standalone index that will no longer be synced with the primary index.\n\n**Modifier**\n\n- `virtual(\"REPLICA\")`.\n  Create a virtual replica,\n  Virtual replicas don't increase the number of records and are optimized for [Relevant sorting](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/relevant-sort/).\n",
            "default": [],
            "x-categories": ["Ranking"]
          },
          "paginationLimitedTo": {
            "type": "integer",
            "example": 100,
            "description": "Maximum number of search results that can be obtained through pagination.\n\nHigher pagination limits might slow down your search.\nFor pagination limits above 1,000, the sorting of results beyond the 1,000th hit can't be guaranteed.\n",
            "default": 1000,
            "maximum": 20000
          },
          "unretrievableAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["total_sales"],
            "description": "Attributes that can't be retrieved at query time.\n\nThis can be useful if you want to use an attribute for ranking or to [restrict access](https://www.algolia.com/doc/guides/security/api-keys/how-to/user-restricted-access-to-data/),\nbut don't want to include it in the search results.\nAttribute names are case-sensitive.\n",
            "default": [],
            "x-categories": ["Attributes"]
          },
          "disableTypoToleranceOnWords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["wheel", "1X2BCD"],
            "description": "Creates a list of [words which require exact matches](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#turn-off-typo-tolerance-for-certain-words).\nThis also turns off [word splitting and concatenation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/splitting-and-concatenation/) for the specified words.\n",
            "default": [],
            "x-categories": ["Typos"]
          },
          "attributesToTransliterate": {
            "description": "Attributes, for which you want to support [Japanese transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead).\n\nTransliteration supports searching in any of the Japanese writing systems.\nTo support transliteration, you must set the indexing language to Japanese.\nAttribute names are case-sensitive.\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["name", "description"],
            "x-categories": ["Languages"]
          },
          "camelCaseAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["description"],
            "description": "Attributes for which to split [camel case](https://wikipedia.org/wiki/Camel_case) words.\nAttribute names are case-sensitive.\n",
            "default": [],
            "x-categories": ["Languages"]
          },
          "decompoundedAttributes": {
            "type": "object",
            "example": {
              "de": ["name"]
            },
            "description": "Searchable attributes to which Algolia should apply [word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) (decompounding).\nAttribute names are case-sensitive.\n\nCompound words are formed by combining two or more individual words,\nand are particularly prevalent in Germanic languagesâ€”for example, \"firefighter\".\nWith decompounding, the individual components are indexed separately.\n\nYou can specify different lists for different languages.\nDecompounding is supported for these languages:\nDutch (`nl`), German (`de`), Finnish (`fi`), Danish (`da`), Swedish (`sv`), and Norwegian (`no`).\nDecompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark).\nFor example, `GartenstÃ¼hle` won't be decompounded if the `Ã¼` consists of `u` (U+0075) and `â—ŒÌˆ` (U+0308).\n",
            "default": {},
            "x-categories": ["Languages"]
          },
          "indexLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "example": ["ja"],
            "description": "Languages for language-specific processing steps, such as word detection and dictionary settings.\n\n**You should always specify an indexing language.**\nIf you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/),\nor the languages you specified with the `ignorePlurals` or `removeStopWords` parameters.\nThis can lead to unexpected search results.\nFor more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).\n",
            "default": [],
            "x-categories": ["Languages"]
          },
          "disablePrefixOnAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["sku"],
            "description": "Searchable attributes for which you want to turn off [prefix matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search).\nAttribute names are case-sensitive.\n",
            "default": [],
            "x-categories": ["Query strategy"]
          },
          "allowCompressionOfIntegerArray": {
            "type": "boolean",
            "description": "Whether arrays with exclusively non-negative integers should be compressed for better performance.\nIf true, the compressed arrays may be reordered.\n",
            "default": false,
            "x-categories": ["Performance"]
          },
          "numericAttributesForFiltering": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Numeric attributes that can be used as [numerical filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters).\nAttribute names are case-sensitive.\n\nBy default, all numeric attributes are available as numerical filters.\nFor faster indexing, reduce the number of numeric attributes.\n\nTo turn off filtering for all numeric attributes, specify an attribute that doesn't exist in your index, such as `NO_NUMERIC_FILTERING`.\n\n**Modifier**\n\n- `equalOnly(\"ATTRIBUTE\")`.\n  Support only filtering based on equality comparisons `=` and `!=`.\n",
            "example": ["equalOnly(quantity)", "popularity"],
            "default": [],
            "x-categories": ["Performance"]
          },
          "separatorsToIndex": {
            "type": "string",
            "example": "+#",
            "description": "Control which non-alphanumeric characters are indexed.\n\nBy default, Algolia ignores [non-alphanumeric characters](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/#handling-non-alphanumeric-characters) like hyphen (`-`), plus (`+`), and parentheses (`(`,`)`).\nTo include such characters, define them with `separatorsToIndex`.\n\nSeparators are all non-letter characters except spaces and currency characters, such as $â‚¬Â£Â¥.\n\nWith `separatorsToIndex`, Algolia treats separator characters as separate words.\nFor example, in a search for \"Disney+\", Algolia considers \"Disney\" and \"+\" as two separate words.\n",
            "default": "",
            "x-categories": ["Typos"]
          },
          "searchableAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["title,alternative_title", "author", "unordered(text)", "emails.personal"],
            "description": "Attributes used for searching. Attribute names are case-sensitive.\n\nBy default, all attributes are searchable and the [Attribute](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute) ranking criterion is turned off.\nWith a non-empty list, Algolia only returns results with matches in the selected attributes.\nIn addition, the Attribute ranking criterion is turned on: matches in attributes that are higher in the list of `searchableAttributes` rank first.\nTo make matches in two attributes rank equally, include them in a comma-separated string, such as `\"title,alternate_title\"`.\nAttributes with the same priority are always unordered.\n\nFor more information, see [Searchable attributes](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/setting-searchable-attributes/).\n\n**Modifier**\n\n- `unordered(\"ATTRIBUTE\")`.\n  Ignore the position of a match within the attribute.\n\nWithout a modifier, matches at the beginning of an attribute rank higher than matches at the end.\n",
            "default": [],
            "x-categories": ["Attributes"]
          },
          "userData": {
            "$ref": "#/components/schemas/userData"
          },
          "customNormalization": {
            "description": "Characters and their normalized replacements.\nThis overrides Algolia's default [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).\n",
            "type": "object",
            "example": {
              "default": {
                "Ã¤": "ae",
                "Ã¼": "ue"
              }
            },
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "x-categories": ["Languages"]
          },
          "attributeForDistinct": {
            "description": "Attribute that should be used to establish groups of results.\nAttribute names are case-sensitive.\n\nAll records with the same value for this attribute are considered a group.\nYou can combine `attributeForDistinct` with the `distinct` search parameter to control\nhow many items per group are included in the search results.\n\nIf you want to use the same attribute also for faceting, use the `afterDistinct` modifier of the `attributesForFaceting` setting.\nThis applies faceting _after_ deduplication, which will result in accurate facet counts.\n",
            "example": "url",
            "type": "string"
          },
          "maxFacetHits": {
            "$ref": "#/components/schemas/maxFacetHits"
          },
          "keepDiacriticsOnCharacters": {
            "type": "string",
            "example": "Ã¸Ã©",
            "description": "Characters for which diacritics should be preserved.\n\nBy default, Algolia removes diacritics from letters.\nFor example, `Ã©` becomes `e`. If this causes issues in your search,\nyou can specify characters that should keep their diacritics.\n",
            "default": "",
            "x-categories": ["Languages"]
          },
          "customRanking": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["desc(popularity)", "asc(price)"],
            "description": "Attributes to use as [custom ranking](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/).\nAttribute names are case-sensitive.\n\nThe custom ranking attributes decide which items are shown first if the other ranking criteria are equal.\n\nRecords with missing values for your selected custom ranking attributes are always sorted last.\nBoolean attributes are sorted based on their alphabetical order.\n\n**Modifiers**\n\n- `asc(\"ATTRIBUTE\")`.\n  Sort the index by the values of an attribute, in ascending order.\n\n- `desc(\"ATTRIBUTE\")`.\n  Sort the index by the values of an attribute, in descending order.\n\nIf you use two or more custom ranking attributes,\n[reduce the precision](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/how-to/controlling-custom-ranking-metrics-precision/) of your first attributes,\nor the other attributes will never be applied.\n",
            "default": [],
            "x-categories": ["Ranking"]
          }
        }
      },
      "indexSettings": {
        "description": "Index settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseIndexSettings"
          },
          {
            "$ref": "#/components/schemas/indexSettingsAsSearchParams"
          }
        ]
      },
      "WithPrimary": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "primary": {
            "type": "string",
            "description": "Replica indices only: the name of the primary index for this replica.\n"
          }
        }
      },
      "settingsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/indexSettings"
          },
          {
            "$ref": "#/components/schemas/WithPrimary"
          }
        ]
      },
      "SynonymType": {
        "type": "string",
        "description": "Synonym type.",
        "example": "onewaysynonym",
        "enum": [
          "synonym",
          "onewaysynonym",
          "altcorrection1",
          "altcorrection2",
          "placeholder",
          "oneWaySynonym",
          "altCorrection1",
          "altCorrection2"
        ]
      },
      "synonymHit": {
        "type": "object",
        "description": "Synonym object.",
        "additionalProperties": false,
        "properties": {
          "objectID": {
            "type": "string",
            "description": "Unique identifier of a synonym object.",
            "example": "synonymID"
          },
          "type": {
            "$ref": "#/components/schemas/SynonymType"
          },
          "synonyms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Words or phrases considered equivalent.",
            "example": ["vehicle", "auto"]
          },
          "input": {
            "type": "string",
            "description": "Word or phrase to appear in query strings (for [`onewaysynonym`s](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/one-way-synonyms/)).",
            "example": "car"
          },
          "word": {
            "type": "string",
            "description": "Word or phrase to appear in query strings (for [`altcorrection1` and `altcorrection2`](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-alternative-corrections/)).",
            "example": "car"
          },
          "corrections": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Words to be matched in records.",
            "example": ["vehicle", "auto"]
          },
          "placeholder": {
            "type": "string",
            "description": "[Placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/) to be put inside records.\n",
            "example": "<Street>"
          },
          "replacements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Query words that will match the [placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/).",
            "example": ["street", "st"]
          }
        },
        "required": ["objectID", "type"]
      },
      "id": {
        "type": "string",
        "example": "12",
        "description": "Unique identifier of a synonym object."
      },
      "synonymHits": {
        "type": "array",
        "description": "Matching synonyms.",
        "items": {
          "$ref": "#/components/schemas/synonymHit"
        }
      },
      "searchSynonymsResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "hits": {
            "$ref": "#/components/schemas/synonymHits"
          },
          "nbHits": {
            "$ref": "#/components/schemas/nbHits"
          }
        },
        "required": ["hits", "nbHits"]
      },
      "keyString": {
        "type": "string",
        "description": "API key.",
        "example": "13ad45b4d0a2f6ea65ecbddf6aa260f2"
      },
      "createdAtTimestamp": {
        "type": "integer",
        "format": "int64",
        "example": 1656345570000,
        "description": "Timestamp when the object was created, in milliseconds since the Unix epoch."
      },
      "baseGetApiKeyResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "value": {
            "$ref": "#/components/schemas/keyString"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAtTimestamp"
          }
        },
        "required": ["value", "createdAt"]
      },
      "acl": {
        "description": "Access control list permissions.",
        "type": "string",
        "enum": [
          "addObject",
          "analytics",
          "browse",
          "deleteObject",
          "deleteIndex",
          "editSettings",
          "inference",
          "listIndexes",
          "logs",
          "personalization",
          "recommendation",
          "search",
          "seeUnretrievableAttributes",
          "settings",
          "usage"
        ]
      },
      "apiKey": {
        "type": "object",
        "description": "API key object.",
        "additionalProperties": false,
        "properties": {
          "acl": {
            "type": "array",
            "description": "Permissions that determine the type of API requests this key can make.\nThe required ACL is listed in each endpoint's reference.\nFor more information, see [access control list](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl).\n",
            "example": ["search", "addObject"],
            "default": [],
            "items": {
              "$ref": "#/components/schemas/acl"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of an API key to help you identify this API key.",
            "example": "Used for indexing by the CLI",
            "default": ""
          },
          "indexes": {
            "type": "array",
            "description": "Index names or patterns that this API key can access.\nBy default, an API key can access all indices in the same application.\n\nYou can use leading and trailing wildcard characters (`*`):\n\n- `dev_*` matches all indices starting with \"dev_\".\n- `*_dev` matches all indices ending with \"_dev\".\n- `*_products_*` matches all indices containing \"_products_\".\n",
            "example": ["dev_*", "prod_en_products"],
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "maxHitsPerQuery": {
            "type": "integer",
            "description": "Maximum number of results this API key can retrieve in one query.\nBy default, there's no limit.\n",
            "default": 0
          },
          "maxQueriesPerIPPerHour": {
            "type": "integer",
            "description": "Maximum number of API requests allowed per IP address or [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/) per hour.\n\nIf this limit is reached, the API returns an error with status code `429`.\nBy default, there's no limit.\n",
            "default": 0
          },
          "queryParameters": {
            "type": "string",
            "description": "Query parameters to add when making API requests with this API key.\n\nTo restrict this API key to specific IP addresses, add the `restrictSources` parameter.\nYou can only add a single source, but you can provide a range of IP addresses.\n\nCreating an API key fails if the request is made from an IP address outside the restricted range.\n",
            "example": "typoTolerance=strict&restrictSources=192.168.1.0/24",
            "default": ""
          },
          "referers": {
            "type": "array",
            "description": "Allowed HTTP referrers for this API key.\n\nBy default, all referrers are allowed.\nYou can use leading and trailing wildcard characters (`*`):\n\n- `https://algolia.com/*` allows all referrers starting with \"https://algolia.com/\"\n- `*.algolia.com` allows all referrers ending with \".algolia.com\"\n- `*algolia.com*` allows all referrers in the domain \"algolia.com\".\n\nLike all HTTP headers, referrers can be spoofed. Don't rely on them to secure your data.\nFor more information, see [HTTP referrer restrictions](https://www.algolia.com/doc/guides/security/security-best-practices/#http-referrers-restrictions).\n",
            "example": ["*algolia.com*"],
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "validity": {
            "type": "integer",
            "description": "Duration (in seconds) after which the API key expires.\nBy default, API keys don't expire.\n",
            "example": 86400,
            "default": 0
          }
        },
        "required": ["acl"]
      },
      "getApiKeyResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseGetApiKeyResponse"
          },
          {
            "$ref": "#/components/schemas/apiKey"
          }
        ]
      },
      "addApiKeyResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "key": {
            "$ref": "#/components/schemas/keyString"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          }
        },
        "required": ["key", "createdAt"]
      },
      "ruleID": {
        "title": "objectID",
        "type": "string",
        "description": "Unique identifier of a rule object."
      },
      "anchoring": {
        "type": "string",
        "description": "Which part of the search query the pattern should match:\n\n- `startsWith`. The pattern must match the beginning of the query.\n- `endsWith`. The pattern must match the end of the query.\n- `is`. The pattern must match the query exactly.\n- `contains`. The pattern must match anywhere in the query.\n\nEmpty queries are only allowed as patterns with `anchoring: is`.\n",
        "enum": ["is", "startsWith", "endsWith", "contains"]
      },
      "context": {
        "type": "string",
        "pattern": "[A-Za-z0-9_-]+",
        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
        "example": "mobile"
      },
      "condition": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "pattern": {
            "type": "string",
            "description": "Query pattern that triggers the rule.\n\nYou can use either a literal string, or a special pattern `{facet:ATTRIBUTE}`, where `ATTRIBUTE` is a facet name.\nThe rule is triggered if the query matches the literal string or a value of the specified facet.\nFor example, with `pattern: {facet:genre}`, the rule is triggered when users search for a genre, such as \"comedy\".\n",
            "example": "{facet:genre}"
          },
          "anchoring": {
            "$ref": "#/components/schemas/anchoring"
          },
          "alternatives": {
            "type": "boolean",
            "description": "Whether the pattern should match plurals, synonyms, and typos.",
            "default": false
          },
          "context": {
            "$ref": "#/components/schemas/context"
          },
          "filters": {
            "type": "string",
            "description": "Filters that trigger the rule.\n\nYou can add filters using the syntax `facet:value` so that the rule is triggered, when the specific filter is selected.\nYou can use `filters` on its own or combine it with the `pattern` parameter.\nYou can't combine multiple filters with `OR` and you can't use numeric filters.\n",
            "example": "genre:comedy"
          }
        }
      },
      "editType": {
        "description": "Type of edit.",
        "type": "string",
        "enum": ["remove", "replace"]
      },
      "edit": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/editType"
          },
          "delete": {
            "description": "Text or patterns to remove from the query string.",
            "type": "string"
          },
          "insert": {
            "description": "Text to be added in place of the deleted text inside the query string.",
            "type": "string"
          }
        }
      },
      "consequenceQueryObject": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "remove": {
            "description": "Words to remove from the search query.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "edits": {
            "description": "Changes to make to the search query.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/edit"
            }
          }
        }
      },
      "consequenceQuery": {
        "description": "Replace or edit the search query.\n\nIf `consequenceQuery` is a string, the entire search query is replaced with that string.\nIf `consequenceQuery` is an object, it describes incremental edits made to the query.\n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/consequenceQueryObject"
          },
          {
            "type": "string"
          }
        ]
      },
      "automaticFacetFilter": {
        "type": "object",
        "description": "Filter or optional filter to be applied to the search.",
        "additionalProperties": false,
        "properties": {
          "facet": {
            "type": "string",
            "description": "Facet name to be applied as filter.\nThe name must match placeholders in the `pattern` parameter.\nFor example, with `pattern: {facet:genre}`, `automaticFacetFilters` must be `genre`.\n"
          },
          "score": {
            "type": "integer",
            "default": 1,
            "description": "Filter scores to give different weights to individual filters."
          },
          "disjunctive": {
            "type": "boolean",
            "default": false,
            "description": "Whether the filter is disjunctive or conjunctive.\n\nIf true the filter has multiple matches, multiple occurences are combined with the logical `OR` operation.\nIf false, multiple occurences are combined with the logical `AND` operation.\n"
          }
        },
        "required": ["facet"]
      },
      "automaticFacetFilters": {
        "description": "Filter to be applied to the search.\n\nYou can use this to respond to search queries that match a facet value.\nFor example, if users search for \"comedy\", which matches a facet value of the \"genre\" facet,\nyou can filter the results to show the top-ranked comedy movies.\n",
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/automaticFacetFilter"
            }
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ]
      },
      "params": {
        "type": "object",
        "description": "Parameters to apply to this search.\n\nYou can use all search parameters, plus special `automaticFacetFilters`, `automaticOptionalFacetFilters`, and `query`.\n",
        "additionalProperties": false,
        "properties": {
          "query": {
            "$ref": "#/components/schemas/consequenceQuery"
          },
          "automaticFacetFilters": {
            "$ref": "#/components/schemas/automaticFacetFilters"
          },
          "automaticOptionalFacetFilters": {
            "$ref": "#/components/schemas/automaticFacetFilters"
          },
          "renderingContent": {
            "$ref": "#/components/schemas/renderingContent"
          }
        }
      },
      "consequenceParams": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSearchParamsWithoutQuery"
          },
          {
            "$ref": "#/components/schemas/indexSettingsAsSearchParams"
          },
          {
            "$ref": "#/components/schemas/params"
          }
        ]
      },
      "promotePosition": {
        "type": "integer",
        "description": "Position in the search results where you want to show the promoted records.",
        "example": 0
      },
      "promoteObjectIDs": {
        "title": "objectIDs",
        "description": "Records to promote.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "objectIDs": {
            "type": "array",
            "maxItems": 100,
            "description": "Object IDs of the records you want to promote.\n\nThe records are placed as a group at the `position`.\nFor example, if you want to promote four records to position `0`,\nthey will be the first four search results.\n",
            "items": {
              "$ref": "#/components/schemas/objectID"
            }
          },
          "position": {
            "$ref": "#/components/schemas/promotePosition"
          }
        },
        "required": ["position", "objectIDs"],
        "x-discriminator-fields": ["objectIDs"]
      },
      "promoteObjectID": {
        "title": "objectID",
        "description": "Record to promote.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          },
          "position": {
            "$ref": "#/components/schemas/promotePosition"
          }
        },
        "required": ["position", "objectID"],
        "x-discriminator-fields": ["objectID"]
      },
      "promote": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/promoteObjectIDs"
          },
          {
            "$ref": "#/components/schemas/promoteObjectID"
          }
        ]
      },
      "consequence": {
        "type": "object",
        "description": "Effect of the rule.\n\nFor more information, see [Consequences](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#consequences).\n",
        "additionalProperties": false,
        "properties": {
          "params": {
            "$ref": "#/components/schemas/consequenceParams"
          },
          "promote": {
            "type": "array",
            "maxItems": 300,
            "description": "Records you want to pin to a specific position in the search results.\n\nYou can promote up to 300 records, either individually, or as groups of up to 100 records each.\n",
            "items": {
              "$ref": "#/components/schemas/promote"
            }
          },
          "filterPromotes": {
            "type": "boolean",
            "default": false,
            "description": "Whether promoted records must match an active filter for the consequence to be applied.\n\nThis ensures that user actions (filtering the search) are given a higher precendence.\nFor example, if you promote a record with the `color: red` attribute, and the user filters the search for `color: blue`,\nthe \"red\" record won't be shown.\n"
          },
          "hide": {
            "type": "array",
            "maxItems": 50,
            "description": "Records you want to hide from the search results.",
            "items": {
              "title": "consequenceHide",
              "type": "object",
              "description": "Object ID of the record to hide.",
              "additionalProperties": false,
              "properties": {
                "objectID": {
                  "$ref": "#/components/schemas/objectID"
                }
              },
              "required": ["objectID"]
            }
          },
          "userData": {
            "type": "object",
            "description": "A JSON object with custom data that will be appended to the `userData` array in the response.\nThis object isn't interpreted by the API and is limited to 1&nbsp;kB of minified JSON.\n",
            "example": {
              "settingID": "f2a7b51e3503acc6a39b3784ffb84300",
              "pluginVersion": "1.6.0"
            }
          }
        }
      },
      "timeRange": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64",
            "description": "When the rule should start to be active, in Unix epoch time."
          },
          "until": {
            "type": "integer",
            "format": "int64",
            "description": "When the rule should stop to be active, in Unix epoch time."
          }
        },
        "required": ["from", "until"]
      },
      "rule": {
        "type": "object",
        "description": "Rule object.",
        "additionalProperties": false,
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/ruleID"
          },
          "conditions": {
            "type": "array",
            "minItems": 0,
            "maxItems": 25,
            "description": "Conditions that trigger a rule.\n\nSome consequences require specific conditions or don't require any condition.\nFor more information, see [Conditions](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#conditions).\n",
            "items": {
              "$ref": "#/components/schemas/condition"
            }
          },
          "consequence": {
            "$ref": "#/components/schemas/consequence"
          },
          "description": {
            "type": "string",
            "description": "Description of the rule's purpose to help you distinguish between different rules.",
            "example": "Display a promotional banner"
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the rule is active."
          },
          "validity": {
            "type": "array",
            "description": "Time periods when the rule is active.",
            "items": {
              "$ref": "#/components/schemas/timeRange"
            }
          }
        },
        "required": ["objectID", "consequence"]
      },
      "parameters_query": {
        "type": "string",
        "description": "Search query for rules.",
        "default": ""
      },
      "parameters_page": {
        "type": "integer",
        "minimum": 0,
        "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
      },
      "parameters_hitsPerPage": {
        "type": "integer",
        "default": 20,
        "minimum": 1,
        "maximum": 1000,
        "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
      },
      "dictionaryType": {
        "type": "string",
        "enum": ["plurals", "stopwords", "compounds"]
      },
      "dictionaryAction": {
        "type": "string",
        "enum": ["addEntry", "deleteEntry"],
        "description": "Actions to perform."
      },
      "dictionaryEntryState": {
        "type": "string",
        "enum": ["enabled", "disabled"],
        "default": "enabled",
        "description": "Whether a dictionary entry is active."
      },
      "dictionaryEntryType": {
        "type": "string",
        "enum": ["custom", "standard"],
        "description": "Whether a dictionary entry is provided by Algolia (standard), or has been added by you (custom)."
      },
      "dictionaryEntry": {
        "type": "object",
        "description": "Dictionary entry.",
        "additionalProperties": true,
        "required": ["objectID"],
        "properties": {
          "objectID": {
            "type": "string",
            "description": "Unique identifier for the dictionary entry.",
            "example": "828afd405e1f4fe950b6b98c2c43c032"
          },
          "language": {
            "$ref": "#/components/schemas/supportedLanguage"
          },
          "word": {
            "type": "string",
            "description": "Matching dictionary word for `stopwords` and `compounds` dictionaries.",
            "example": "the"
          },
          "words": {
            "type": "array",
            "description": "Matching words in the `plurals` dictionary including declensions.",
            "example": ["cheval", "cheveaux"],
            "items": {
              "type": "string"
            }
          },
          "decomposition": {
            "type": "array",
            "description": "Invividual components of a compound word in the `compounds` dictionary.",
            "example": ["kopf", "schmerz", "tablette"],
            "items": {
              "type": "string"
            }
          },
          "state": {
            "$ref": "#/components/schemas/dictionaryEntryState"
          },
          "type": {
            "$ref": "#/components/schemas/dictionaryEntryType"
          }
        }
      },
      "searchDictionaryEntriesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "hits": {
            "type": "array",
            "description": "Dictionary entries matching the search criteria.",
            "items": {
              "$ref": "#/components/schemas/dictionaryEntry"
            }
          },
          "page": {
            "$ref": "#/components/schemas/parameters_page"
          },
          "nbHits": {
            "$ref": "#/components/schemas/nbHits"
          },
          "nbPages": {
            "$ref": "#/components/schemas/nbPages"
          }
        },
        "required": ["hits", "page", "nbHits", "nbPages"]
      },
      "standardEntry": {
        "oneOf": [
          {
            "type": "object",
            "description": "Key-value pair of a language ISO code and a boolean value.",
            "example": {
              "fr": false
            },
            "additionalProperties": {
              "x-additionalPropertiesName": "language",
              "type": "boolean"
            }
          },
          {
            "type": "null"
          }
        ]
      },
      "standardEntries": {
        "type": "object",
        "description": "Key-value pairs of [supported language ISO codes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) and boolean values.\n",
        "additionalProperties": false,
        "properties": {
          "plurals": {
            "$ref": "#/components/schemas/standardEntry"
          },
          "stopwords": {
            "$ref": "#/components/schemas/standardEntry"
          },
          "compounds": {
            "$ref": "#/components/schemas/standardEntry"
          }
        }
      },
      "dictionaryLanguage": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "description": "Dictionary type. If `null`, this dictionary type isn't supported for the language.",
            "properties": {
              "nbCustomEntries": {
                "description": "Number of custom dictionary entries.",
                "type": "integer"
              }
            }
          },
          {
            "type": "null"
          }
        ]
      },
      "languages": {
        "type": "object",
        "description": "Dictionary language.",
        "additionalProperties": false,
        "required": ["plurals", "stopwords", "compounds"],
        "properties": {
          "plurals": {
            "$ref": "#/components/schemas/dictionaryLanguage"
          },
          "stopwords": {
            "$ref": "#/components/schemas/dictionaryLanguage"
          },
          "compounds": {
            "$ref": "#/components/schemas/dictionaryLanguage"
          }
        }
      },
      "userID": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9 \\-*.]+$",
        "description": "Unique identifier of the user who makes the search request.",
        "example": "user1"
      },
      "userId": {
        "title": "userID",
        "type": "object",
        "description": "Unique user ID.",
        "properties": {
          "userID": {
            "$ref": "#/components/schemas/userID"
          },
          "clusterName": {
            "type": "string",
            "description": "Cluster to which the user is assigned.",
            "example": "c1-test"
          },
          "nbRecords": {
            "type": "integer",
            "description": "Number of records belonging to the user.",
            "example": 42
          },
          "dataSize": {
            "type": "integer",
            "description": "Data size used by the user.",
            "example": 0
          }
        },
        "required": ["userID", "clusterName", "nbRecords", "dataSize"]
      },
      "clusterName": {
        "type": "string",
        "description": "Cluster name.",
        "example": "c11-test"
      },
      "nbRecords": {
        "type": "integer",
        "description": "Number of records in the cluster.",
        "example": 3
      },
      "dataSize": {
        "type": "integer",
        "description": "Data size taken by all the users assigned to the cluster.",
        "example": 481
      },
      "source": {
        "type": "object",
        "description": "Source.",
        "required": ["source"],
        "properties": {
          "source": {
            "description": "IP address range of the source.",
            "type": "string",
            "example": "10.0.0.1/32"
          },
          "description": {
            "description": "Source description.",
            "type": "string",
            "example": "Server subnet"
          }
        }
      },
      "sources": {
        "description": "Sources.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/source"
        }
      },
      "logType": {
        "type": "string",
        "enum": ["all", "query", "build", "error"],
        "default": "all"
      },
      "taskStatus": {
        "type": "string",
        "enum": ["published", "notPublished"],
        "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
      },
      "GetTaskResponse": {
        "title": "getTaskResponse",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "status": {
            "$ref": "#/components/schemas/taskStatus"
          }
        },
        "required": ["status"]
      },
      "operationType": {
        "type": "string",
        "enum": ["move", "copy"],
        "example": "copy",
        "description": "Operation to perform on the index."
      },
      "scopeType": {
        "type": "string",
        "enum": ["settings", "synonyms", "rules"]
      },
      "fetchedIndex": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Index name.",
            "example": "movies"
          },
          "createdAt": {
            "type": "string",
            "description": "Index creation date. An empty string means that the index has no records.",
            "example": "2022-09-19T16:36:44.471Z"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "entries": {
            "type": "integer",
            "description": "Number of records contained in the index.",
            "example": 100
          },
          "dataSize": {
            "type": "integer",
            "description": "Number of bytes of the index in minified format.",
            "example": 48450
          },
          "fileSize": {
            "type": "integer",
            "description": "Number of bytes of the index binary file.",
            "example": 112927
          },
          "lastBuildTimeS": {
            "type": "integer",
            "description": "Last build time.",
            "example": 3
          },
          "numberOfPendingTasks": {
            "type": "integer",
            "default": 0,
            "description": "Number of pending indexing operations. This value is deprecated and should not be used."
          },
          "pendingTask": {
            "type": "boolean",
            "default": false,
            "description": "A boolean which says whether the index has pending tasks. This value is deprecated and should not be used."
          },
          "primary": {
            "type": "string",
            "description": "Only present if the index is a replica. Contains the name of the related primary index.",
            "example": "T02"
          },
          "replicas": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Only present if the index is a primary index with replicas. Contains the names of all linked replicas.",
            "example": ["T02_push", "T2replica"]
          },
          "virtual": {
            "type": "boolean",
            "description": "Only present if the index is a [virtual replica](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/sort-an-index-alphabetically/#virtual-replicas).",
            "x-categories": ["Ranking"]
          }
        },
        "required": [
          "name",
          "createdAt",
          "updatedAt",
          "entries",
          "dataSize",
          "fileSize",
          "lastBuildTimeS",
          "pendingTask",
          "numberOfPendingTasks"
        ]
      },
      "listIndicesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "All indices in your Algolia application.",
            "items": {
              "$ref": "#/components/schemas/fetchedIndex"
            }
          },
          "nbPages": {
            "type": "integer",
            "description": "Number of pages.",
            "example": 100
          }
        },
        "required": ["items"]
      },
      "apiKeyOperation": {
        "type": "string",
        "enum": ["add", "delete", "update"]
      },
      "securedApiKeyRestrictions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "searchParams": {
            "$ref": "#/components/schemas/searchParamsObject"
          },
          "filters": {
            "type": "string",
            "description": "Filters that apply to every search made with the secured API key.\nExtra filters added at search time will be combined with `AND`.\nFor example, if you set `group:admin` as fixed filter on your generated API key,\nand add `groups:visitors` to the search query, the complete set of filters will be `group:admin AND groups:visitors`.\n"
          },
          "validUntil": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when the secured API key expires, measured in seconds since the Unix epoch."
          },
          "restrictIndices": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Index names or patterns that this API key can access.\nBy default, an API key can access all indices in the same application.\n\nYou can use leading and trailing wildcard characters (`*`):\n\n- `dev_*` matches all indices starting with \"dev_\".\n- `*_dev` matches all indices ending with \"_dev\".\n- `*_products_*` matches all indices containing \"_products_\".\n"
          },
          "restrictSources": {
            "type": "string",
            "description": "IP network that are allowed to use this key.\n\nYou can only add a single source, but you can provide a range of IP addresses.\nUse this to protect against API key leaking and reuse.\n",
            "example": "192.168.1.0/24"
          },
          "userToken": {
            "type": "string",
            "description": "Pseudonymous user identifier to restrict usage of this API key to specific users.\n\nBy default, rate limits are set based on IP addresses. This can be an issue if many users search from the same IP address.\nTo avoid this, add a user token to each generated API key.\n"
          }
        }
      },
      "replaceAllObjectsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "copyOperationResponse": {
            "description": "The response of the `operationIndex` request for the `copy` operation.",
            "$ref": "#/components/schemas/updatedAtResponse"
          },
          "batchResponses": {
            "type": "array",
            "description": "The response of the `batch` request(s).",
            "items": {
              "$ref": "#/components/schemas/batchResponse"
            }
          },
          "moveOperationResponse": {
            "description": "The response of the `operationIndex` request for the `move` operation.",
            "$ref": "#/components/schemas/updatedAtResponse"
          }
        },
        "required": ["copyOperationResponse", "batchResponses", "moveOperationResponse"]
      },
      "builtInOperationType": {
        "type": "string",
        "enum": [
          "Increment",
          "Decrement",
          "Add",
          "Remove",
          "AddUnique",
          "IncrementFrom",
          "IncrementSet"
        ],
        "description": "How to change the attribute."
      },
      "builtInOperationValue": {
        "oneOf": [
          {
            "type": "string",
            "description": "A string to append or remove for the `Add`, `Remove`, and `AddUnique` operations."
          },
          {
            "type": "integer",
            "description": "A number to add, remove, or append, depending on the operation."
          }
        ]
      },
      "builtInOperation": {
        "type": "object",
        "description": "Update to perform on the attribute.",
        "additionalProperties": false,
        "properties": {
          "_operation": {
            "$ref": "#/components/schemas/builtInOperationType"
          },
          "value": {
            "$ref": "#/components/schemas/builtInOperationValue"
          }
        },
        "required": ["_operation", "value"]
      }
    },
    "parameters": {
      "PathInPath": {
        "name": "path",
        "in": "path",
        "description": "Path of the endpoint, anything after \"/1\" must be specified.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "/keys"
        }
      },
      "Parameters": {
        "name": "parameters",
        "in": "query",
        "description": "Query parameters to apply to the current query.",
        "schema": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "IndexName": {
        "name": "indexName",
        "in": "path",
        "description": "Name of the index on which to perform the operation.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "ALGOLIA_INDEX_NAME"
        }
      },
      "ObjectID": {
        "name": "objectID",
        "in": "path",
        "description": "Unique record identifier.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/objectID"
        }
      },
      "ForwardToReplicas": {
        "in": "query",
        "name": "forwardToReplicas",
        "required": false,
        "description": "Whether changes are applied to replica indices.",
        "schema": {
          "type": "boolean"
        }
      },
      "parameters_ObjectID": {
        "name": "objectID",
        "in": "path",
        "description": "Unique identifier of a synonym object.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "synonymID"
        }
      },
      "ReplaceExistingSynonyms": {
        "in": "query",
        "name": "replaceExistingSynonyms",
        "schema": {
          "type": "boolean"
        },
        "description": "Whether to replace all synonyms in the index with the ones sent with this request."
      },
      "KeyString": {
        "in": "path",
        "name": "key",
        "required": true,
        "schema": {
          "type": "string",
          "example": "ALGOLIA_API_KEY"
        },
        "description": "API key."
      },
      "ObjectIDRule": {
        "in": "path",
        "name": "objectID",
        "description": "Unique identifier of a rule object.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ruleID"
        }
      },
      "ClearExistingRules": {
        "in": "query",
        "name": "clearExistingRules",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "description": "Whether existing rules should be deleted before adding this batch."
      },
      "DictionaryName": {
        "in": "path",
        "name": "dictionaryName",
        "description": "Dictionary type in which to search.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/dictionaryType"
        }
      },
      "Page": {
        "in": "query",
        "name": "page",
        "description": "Requested page of the API response.\nIf `null`, the API response is not paginated.\n",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "HitsPerPage": {
        "in": "query",
        "name": "hitsPerPage",
        "description": "Number of hits per page.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 100
        }
      },
      "UserIDInHeader": {
        "name": "X-Algolia-User-ID",
        "description": "Unique identifier of the user who makes the search request.",
        "in": "header",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/userID"
        }
      },
      "UserIDInPath": {
        "name": "userID",
        "description": "Unique identifier of the user who makes the search request.",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/userID"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request or request arguments.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "FeatureNotEnabled": {
        "description": "This feature is not enabled on your Algolia account.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "MethodNotAllowed": {
        "description": "Method not allowed with this API key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "IndexNotFound": {
        "description": "Index not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "DeletedAt": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "title": "deletedAtResponse",
              "description": "Response, taskID, and deletion timestamp.",
              "additionalProperties": false,
              "type": "object",
              "required": ["taskID", "deletedAt"],
              "properties": {
                "taskID": {
                  "$ref": "#/components/schemas/taskID"
                },
                "deletedAt": {
                  "$ref": "#/components/schemas/deletedAt"
                }
              }
            }
          }
        }
      },
      "UpdatedAtWithObjectId": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "title": "updatedAtWithObjectIdResponse",
              "description": "Response, taskID, unique object identifier, and an update timestamp.",
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "taskID": {
                  "$ref": "#/components/schemas/taskID"
                },
                "updatedAt": {
                  "$ref": "#/components/schemas/updatedAt"
                },
                "objectID": {
                  "$ref": "#/components/schemas/objectID"
                }
              }
            }
          }
        }
      },
      "UpdatedAt": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/updatedAtResponse"
            }
          }
        }
      },
      "CreatedAt": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "title": "createdAtResponse",
              "description": "Response and creation timestamp.",
              "additionalProperties": false,
              "type": "object",
              "required": ["createdAt"],
              "properties": {
                "createdAt": {
                  "$ref": "#/components/schemas/createdAt"
                }
              }
            }
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Search and indexing",
      "tags": ["Indices", "Records", "Search"]
    },
    {
      "name": "Relevance",
      "tags": ["Rules", "Synonyms", "Dictionaries"]
    },
    {
      "name": "Others",
      "tags": ["Api Keys", "Clusters", "Vaults", "Advanced"]
    },
    {
      "name": "Models",
      "tags": ["_model_index_settings"]
    }
  ]
}
